
const post = `
<h1 class="title">정처기 실기 11.응용 SW 기초 기술 활용1</h1>
<p class="post-date">
    <span class="creation-date">작성일 : 2023-07-19</span>
    <span class="modification-date">수정일 : 2023-07-19</span>
</p>
<p class="top-fixed-guide">
    <span class="red font-size-s">* 최종 암기 확인/복습을 위한 요약본</span>
    <br><mark>C132 운영체제의 개념</mark>
    <br><mark>A133 운영체제의 종류</mark>
    <br><mark>C134 기억장치 관리</mark>
    <br><mark>C135 가상기억장치 구현 기법</mark>
    <br><mark>B136 페이지 교체 알고리즘</mark>
    <br><mark>B137 가상기억장치 기타 관리 사항</mark>
    <br><mark>B138 프로세스의 개요</mark>
</p>
<hr>

<article id="sub1">
    <h2 class="sub-title">132</h2>
    <ul><li><button type="button" class="red">운영체제</button>(<button type="button">OS; Operating System</button>)<ul><li><b>컴퓨터 시스템의 자원들을 효율적으로 관리하며, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있도록 환경을 제공하는 여러 프로그램의 모임</b></li><li>컴퓨터 사용자와 컴퓨터 하드웨어 간의 인터페이스로 동작하는 시스테 소프트웨어의 일종</li><li>다른 응용 프로그램이 유용한 작업을 할 수 있도록 환경을 제공해줌</li><li>프로세스, 기억장치, 주변장치, 파일 등을 관리하는 기능을 수행함</li><li>종류 : Windows, UNIX, LINUX, MacOS, MS-DOS 등</li><li><b>목적</b><ul><li><button type="button" class="red">처리 능력</button>(<button type="button">Throughtput</button>) : 일정 시간 내에 시스템이 처리하는 일의 양</li><li><button type="button" class="red">반환 시간</button>(<button type="button">Turn Around Time</button>) : 시스템에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간</li><li><button type="button" class="red">사용 가능도</button>(<button type="button">Availability</button>) : 시스템을 사용할 필요가 있을 때 즉시 사용 가능한 정도</li><li><button type="button" class="red">신뢰도</button>(<button type="button">Reliability</button>) : 시스템이 주어진 문제를 정확하게 해결하는 정도</li></ul></li><li><b>기능</b><ul><li>프로세서(처리기, Processor), 기억장치(주기억장치, 보조기억장치), 입·출력장치, 파일 및 정보 등의 자원을 관리함</li><li>자원을 효율적으로 관리하기 위해 자원의 스케줄링 기능 제공함</li><li>사용자와 시스템 간의 편리한 인터페이스를 제공함</li><li>시스템의 각종 하드웨어와 네트워크를 관리·제어함</li><li>데이터를 관리하고, 데이터 및 자원의 공유 기능을 제공함</li></ul></li></ul></li></ul>
</article>
<hr>
<article id="sub2">
    <h2 class="sub-title"><b class="red">133</b></h2>
    <ul><li><button type="button">Windows</button><ul><li>1997년대 마이크로소프트(Microsoft) 사가 개발한 운영체제</li><li>특징<ul><li><button type="button" class="red">그래픽 사용자 인터페이스</button>(<button type="button">GUI; Graphic User Interface</button>) : 키보드로 명령어를 직접 입력하지 않고, 마우스로 아이콘이나 메뉴를 선택하여 모든 작업을 수행하는 방식</li><li><button type="button" class="red">선점형 멀티태스킹</button>(<button type="button">Preemptive Multi-Tasking</button>) : 동시에 여러 개의 프로그램을 실행하는 멀티태스킹을 하면서 운영체제가 각 작업의 CPU 이용 시간을 제어하여 응용 프로그램 실행중 문제가 발생하면 해당 프로그램을 강제 종료시키고 모든 시스템 자원을 반환하는 방식</li><li><button type="button" class="red">PnP</button>(<button type="button">Plug and Play</button>) : 컴퓨터 시스템에 프린터나 사운드 카드 등의 하드웨어를 설치했을 때, 해당 하드웨어를 사용하는 데 필요한 시스템 환경을 운영체제가 자동으로 구성해 주는 기능</li><li><button type="button" class="red">OLE</button>(<button type="button">Object Linking and Embedding</button>) : 다른 여러 응용 프로그램에서 작성된 문자나 그림 등의 개체(Object)를 현재 작성 중인 문서에 자유롭게 연결(Linking)하거나 삽입(Embedding)하여 편집할 수 있게 하는 기능</li><li><button type="button" class="red">255자의 긴 파일명</button> : &#47; &#92; * ? " &#60; &#62; |를 제외한 모든 문자 및 공백을 사용하여 최대 255자까지 파일 이름을 지정할 수 있음</li><li><button type="button" class="red">Single-User 시스템</button> : 컴퓨터 한 대를 한 사람만이 독점해서 사용함</li></ul></li></ul></li><li><button type="button">UNIX</button><ul><li>1960년대 AT&T 벨(Bell) 연구소, MIT, General Electric이 공동 개발한 운영체제</li><li>시분할 시스템(Time Sharing System)을 위해 설계된 대화식 운영체제</li><li>소스가 공개된 개방향 시스템(Open System)</li><li>대부분 C 언어로 작성되어 있어 이식성이 높으며 장치, 프로세스 간의 호환성이 높음</li><li>다중 사용자(Multi-User), 다중 작업(Multi-Tasking) 지원</li><li>트리(Tree) 구조의 파일 시스템을 가짐</li><li>시스템 구성요소<ul><li><button type="button" class="red">커널(Kernel)</button><ul><li>하드웨어를 보호하고, 프로그램과 하드웨어 간의 인터페이스 역할을 담당함</li><li>UNIX의 가장 핵심적인 부분임</li><li>프로세스(CPU 스케줄링) 관리, 기억장치 관리, 파일 관리, 입·출력 관리, 프로세스간 통신, 데이터 전송 및 변환 등 여러가지 기능을 수행함</li></ul></li><li><button type="button" class="red">쉘(Shell)</button><ul><li>사용자의 명령어를 인식하여 프로그램을 호출하고 명령을 수행하는 명령어 해석기</li><li>시스템과 사용자 간의 인터페이스를 담당함</li><li>종류 : Bourne Shell, C Shell, korn Shell</li></ul></li><li><button type="button" class="red">유틸리티 프로그램(Utility Program)</button><ul><li> 일반 사용자가 작성한 응용 프로그램을 처리하는 데 사용함</li><li>DOS에서의 외부 명령어에 해당됨</li><li>종류 :에디터, 컴파일러, 인터프리터, 디버거</li></ul></li></ul></li></ul></li><li><button type="button">LINUX</button><ul><li>1991년 리누스 토발즈(Linus Torvalds)가 UNIX를 기반으로 개발한 운영체제</li><li>프로그램 소스 코드가 무료로 공개되어 있기 때문에 프로그래머가 원하는 기능을 추가할 수 있음</li><li>다양한 플랫폼에 설치하여 사용이 가능하며, 재배포가 가능함</li><li>UNIX와 완벽하게 호환됨</li><li>대부분 특징이 UNIX와 동일함</li></ul></li><li><button type="button">MacOS</button><ul><li>1980년대 애플(Apple) 사가 UNIX를 기반으로 개발한 운영체제</li><li>아이맥(iMac)과 맥붑(MacBook) 등 애플 사에서 생산하는 제품에서만 사용이 가능함</li><li>드라이버 설치 및 install과 uninstall의 과정이 단순함</li></ul></li><li><button type="button">Android</button><ul><li>구글(Google) 사에서 개발한 리눅스 커널 기반의 개방형 모바일 운영체제</li><li>모든 코드가 공개된 개방형 소프트웨어</li><li>자바와 코틀린으로 애플리케이션을 작성함<br/>    - 스마트폰 등의 휴대용 장치에서 주로 사용함</li></ul></li><li><button type="button">iOS</button><ul><li>애플(Apple) 사에서 개발한 유닉스 기반의 모바일 운영체제</li><li>아이폰, 아이팟 터치, 아이패드 등에 내장됨</li><li>애플사 고유의 모바일 운영체제로 타사 제품은 iOS를 탑재할 수 없음</li></ul></li></ul>
</article>
<hr>
<article id="sub3">
    <h2 class="sub-title">134 기억장치의 관리 전략</h2>
    <ul><li>보조기억장치의 프로그램이나 데이터를 주기억장치에 적재시키는 시기, 적재 위치 등을 지정하여 한정된 주기억장치의 공간을 효율적으로 사용하기 위함</li><li><b>종류</b><ul><li><button type="button">반입(Fetch) 전략</button><ul><li>보조기억장치에 보관중인 프로그램이나 데이터를 언제 주기억장치로 적재할 것인지를 결정하는 전략</li><li><b>기법</b><ul><li><button type="button" class="red">요구 반입</button>(<button type="button">Demend Fetch</button>) : 실행중인 프로그램이 특정 프로그램이나 데이터 등의 참조를 요구할 떄 적제하는 방법</li><li><button type="button" class="red">예상 반입</button>)(<button type="button">Anticipatory Fetch</button>) : 실행중인 프로그램에 의해 참조될 프로그램이나 데이터를 미리 예상하여 적재하는 방법</li></ul></li></ul></li><li><button type="button">배치(Placement) 전략</button><ul><li>새로 반입되는 프로그램이나 데이터를 주기억장치의 어디에 위치시킬 것인지를 결정하는 전략</li><li><b>기법</b><ul><li><button type="button" class="red">최초 적합</button>(<button type="button">First Fit</button>) : 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 <b>첫 번째 분할 영역</b>에 배치시키는 방법</li><li><button type="button" class="red">최적 적합</button>(<button type="button">Best Fit</button>) : 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 <b>단편화를 가장 작게 남기는 분할 영역</b>에 배치시키는 방법</li><li><button type="button" class="red">최악 적합</button>(<button type="button">Worst Fit</button>) : 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역중에서 단편화를 가장 많이 남기는 분할 영역에 배치시키는 방법</li></ul></li><li><button type="button" class="red">단편화</button> : 주기억장치의 분할된 영역에 프로그램이나 데이터를 할당할 경우, 분할된 영역이 프로그램이나 데이터보다 작거나 커서 생기는 빈 기억 공간<ul><li><button type="button">내부 단편화</button> : 분할된 영역이 할당될 프로그램의 크기보다 크기 때문에 프로그램이 할당된 후 사용되지않고 남아 있는 빈 공간</li><li><button type="button">외부 단편화</button> : 분할된 영역이 할당될 프로그램의 크기보다 작기 때문에 프로그램이 할당될 수 없어 사용되지않고 빈 공간으로 남아있는 분할된 전체 영역 </li></ul></li></ul></li><li><button type="button">교체(Replacement) 전략</button><ul><li>주기억장치의 모든 영역이 이미 사용중인 상태에서 새로운 프로그램이나 데이터를 주기억장치에 배치하려고 할 때, <b>이미 사용되고 있는 영역 중에서 어느 영역을 교체하여 사용할 것인지를 결정하는 전략</b></li><li><b>종류</b> : FIFO, OPT, LRU, LFU, NUR, SCR 등</li></ul></li></ul></li></ul></li></ul>
</article>
<hr>
<article id="sub4">
    <h2 class="sub-title">135</h2>
    <ul><li><button type="button">가상기억장치(Virtual Memory)</button><ul><li><b>보조기억장치의 일부를 주기억장치처럼 사용하는것</b>. 용량이 작은 주기억장치를 마치 큰 용량을 가진 것 처럼 사용하는 기법</li><li>프로그램을 여러개의 작은 블록 단위로 나누어서 가상기억장치에 보관해 놓고, 프로그램 실행 시 요구되는 블록만 주기억장치에 불연속적으로 할당하여 처리함</li><li>주기억 장치의 이용률과 다중 프로그래밍의 효율을 높일 수 있음</li><li>블록 단위로 나누어 사용하므로 연속 할당 방식에서 발생할 수 있는 단편화를 해결할 수 있음</li><li><b>일반적인 구현방법</b><ul><li><button type="button" class="red">페이징(Paging) 기법</button><ul><li>가상기억장치에 보관되어 있는 <b>프로그램과 주기억장치의 영역을 동일한 크기로 나눈 후</b> 나눠진 프로그램을 동일하게 나눠진 <b>주기억 장치의 영역에 적재시켜 실행</b>하는 기법</li><li><button type="button">페이징(Paging)</button> : 프로그램을 일정한 크기로 나눈 단위</li><li><button type="button">페이지 프레임(Page Frame)</button> : 페이지 크기로 일정하게 나누어진 주기억장치의 단위</li><li>외부 단편화는 발생하지 않으나 <b>내부 단편화는 발생</b>할 수 있음</li><li>주소 변환을 위해서 페이지의 위치 정보를 가지고 있는 <button type="button">페이지 맵 테이블(Page Map Table)</button>이 필요함</li><li><button type="button">페이지 맵 테이블</button> 사용으로 비용이 증가하고, 처리속도가 감소됨</li></ul></li><li><button type="button" class="red">세그먼테이션(Segmentation) 기법</button><ul><li>가상기억장치에 보관되어 있는<b>프로그램을 다양한 크기의 논리적인 단위로 나눈 후 주기억장치에 적재시켜 실행</b>시키는 기법</li><li><button type="button">세그먼트(Segment)</button> : 프로그램을 배열이나 함수 등과 같은 논리적인 크기로 나눈 단위. 고유한 이름과 크기를 가짐</li><li>이 기법을 이용하는 궁극적인 이유 : <b>기억공간을 절약</b>하기 위해</li><li>주소 변환을 위해서 세그먼트가 존재하는 위치 정보를 가지고 있는 <button type="button">세그먼트 맵 테이블(Sement Map Table)</button>이 필요함</li><li>내부 단편화는 발생하지 않으나 <b>외부 단편화는 발생</b>할 수 있음</li></ul></li></ul></li></ul></li></ul>
</article>
<hr>
<article id="sub5">
    <h2 class="sub-title"><b class="red">136</b></h2>
    <ul><li><button type="button" class="red">페이지 교체 알고리즘</button><ul><li><b>페이지 부재(Page Fault)가 발생하면</b> 가상기억장치에서 필요한 페이지를 찾아 주깅거장치에 적재해야 하는데, 이때 주기억장치의 모든 페이지 프레임이 사용중이면 <b>어떤 페이지 프레임을 선택하여 교체할 것인지를 결정</b>하는 기법</li><li><b>종류</b><ul><li><button type="button">OPT(OPTimal replacement, 최적 교체)</button><ul><li><b>앞으로 가장 오랫동안 사용하지 않을 페이지를 교체하는 기법</b></li><li>벨레이디(Gelady)가 제안함</li><li>페이지 부재 횟수가 가장 적게 발생하는 가장 효율적인 알고리즘</li></ul></li><li><button type="button">FIFO(First In First Out)</button><ul><li>각 페이지가 주기억장치에 적재될 때마다 그때의 시간을 기억시켜 <b>가장 먼저 들어와서 가장 오래 있었던 페이지를 교체하는 기법</b></li><li>이해하기 쉽고, 프로그래밍 및 설계가 간단함</li></ul></li><li><button type="button">LRU(Least Recently Used)</button><ul><li><b>최근에 가장 오랫동안 사용하지 않은 페이지를 교체하는 기법</b></li><li>각 페이지마다 계수기(Counter)나 스택(Stack)을 두어 현시점에서 가장 오랫동안 사용하지 않은, 즉 가장 오래전에 사용된 페이지를 교체함</li></ul></li><li><button type="button">LFU(Least Frequently Used)</button><ul><li><b>사용 빈도가 가장 적은 페이지를 교체하는 기법</b></li><li>활발하게 사용되는 페이지는 사용 횟수가 많아 교체되지 않고 사용됨</li></ul></li><li><button type="button">NUR(Not Used Recently)</button><ul><li><button type="button" class="not-hidden">LRU</button>와 비슷한 알고리즘. <b>최근에 사용하지 않은 페이지를 교체하는 기법</b></li><li>향후에도 사용되지 않은 가능성이 높다는 것을 전제로 LRU에 나타나는 시간적인 오버헤드를 줄일 수 있음</li><li>최근 사용 여부를 확인하기 위해서 각 페이지마다 두개의 비트, 즉 <button type="button">참조 비트(Reference Bit)</button>와 <button type="button">변형 비트(Modified Bit, Dirty Bit)</button>가 사용됨</li></ul></li><li><button type="button">SCR(Secend Change Replacement, 2차 기회 교체)</button><ul><li><b>가장 오랫동안 주기억장치에 있던 페이지 중 자주 사용되는 페이지의 교체를 방지하기 위한 기법</b></li><li>FIFO 기법의 단점을 보완하는데 사용됨</li></ul></li></ul></li></ul></li></ul>
</article>
<hr>
<article id="sub6">
    <h2 class="sub-title"><b class="red">137</b></h2>
    <ul><li><b>페이지 크기</b><ul><li>페이징 기법을 사용하면 프로그램을 페이지 단위로 나누게 되는데, 페이지의 크기에 따라 시스템이 미치는 영향이 다름</li><li><button type="button">페이지 크기가 작을 경우</button><ul><li>페이지 단편화가 감소되고, 한 개의 페이지를 주기억장치로 이동시키는 시간이 줄어듦</li><li>불필요한 내용이 주기억장치에 적재될 확률이 적으므로 효율적인 <button type="button" class="not-hidden">워킹 셋</button>을 유지할 수 있음</li><li>페이지 정보를 갖는 <button type="button" class="not-hidden">페이지 맵 테이블</button>의 크기가 커지고, 매핑 속도가 늦어짐</li><li>디스크 접근 횟수가 많아져서 전체적인 입·출력 시간은 늘어남</li></ul></li><li><button type="button">페이지 크기가 클 경우</button><ul><li>페이지 정보를 갖는 <button type="button" class="not-hidden">페이지 맵 테이블</button>의 크기가 작아지고, 매핑 속도가 빨라짐</li><li>디스크 접근 횟수가 줄어들어 전체적인 입·출력의 효율성이 증가됨</li><li>페이지 단편화가 증가되고, 한 개의 페이지를 주기억장치로 이동시키는 시간이 늘어남</li></ul></li></ul></li><li><button type="button" class="red">Locality</button> = <button type="button">국부성(지역성, 구역성, 국소성)</button><ul><li><b>프로세스가 실행되는 동안 주기억장치를 참조할 때 일부 페이지만 집중적으로 참조하는 성질이 있다는 이론</b></li><li><button type="button" class="not-hidden">스래싱</button>을 방지하기 위한 <button type="button" class="not-hidden">워킹 셋</button> 이론의 기반이 됨</li><li>가상기억장치 관리와 캐시 메모리 시스템의 이론적인 근거</li><li>데닝(Denning) 교수에 의해 Locality의 개념이 증명됨</li><li><b>종류</b><ul><li><button type="button" class="red">시간 구역성</button>(<button type="button">Temporal Locality</button>) : 프로세스가 실행되면서 하나의 페이지를 일정 시간 동안 집중적으로 액세스하는 현상</li><li><button type="button" class="red">공간 구역성</button>(<button type="button">Spatial Locality</button>) : 프로세스 실행 시 일정 위치의 페이지를 집중적으로 액세스하는 현상</li></ul></li></ul></li><li><button type="button" class="red">워킹 셋</button>(<button type="button">Working Set</button>)<ul><li><b>프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합</b></li><li>데닝(Denning)이 제안한 프로그램의 움직임에 대한 모델로, 프로그램의 Locality 특징을 이용함</li><li>자주 참조되는 워킹 셋을 주기억장치에 상주시킴으로써 페이지 부재 및 페이지 교체 현상이 줄어들어 프로세스의 기억장치 사용이 안정됨</li></ul></li><li><button type="button" class="red">스래싱</button>(<button type="button">Thrashing</button>)<ul><li><b>프로세스의 처리 시간보다 페이지 교체에 소요되는 시간이 더 많아지는 현상</b></li><li>다중 프로그래밍 시스템이나 가상기억장치를 사용하는 시스템에서 하나의 프로세스 수행 과정 중에 자주 <button type="button" class="not-hidden">페이지 부재(Page Fault)</button>가 발생함으로써 나타나며, 전체 시스템의 성능이 저하됨</li><li><b>다중 프로그래밍의 정도(얼마나 많은 프로그램이 동시에 수행되는가)</b>가 높아짐에 따라 CPU의 이용률은 어느 특정 시점까지는 높아지지만, 다중 프로그래밍의 정도가 더욱 커지면 스래싱이 나타나고, CPU의 이용률은 급격히 감소하게 됨<br/></li></ul></li></ul>
</article>
<hr>
<article id="sub7">
    <h2 class="sub-title"><b class="red">138</b></h2>
    <ul><li><button type="button" class="red">프로세스(Process)</button><ul><li>일반적으로 프로세서에 의해 처리되는 사용자 프로그램, 시스템 프로그램, 즉 <b>실행중인 프로그램</b>을 의미함</li><li>다음과 같이 여러가지로 <b>정의</b>할 수 있음<ul><li>PCB를 가진 프로그램</li><li>실기억장치에 저장된 프로그램</li><li>프로세서가 할당되는 실체로서, 디스패치가 가능한 단위</li><li><button type="button" class="not-hidden">프로시저</button>가 활동중인 것<ul><li><button type="button" class="not-hidden">프로시저</button> = <button type="button" class="not-hidden">부프로그램</button> : 한 프로그램에서 분할될 수 있는 작은 프로그램</li></ul></li><li><button type="button" class="not-hidden">비동기적 행위</button>를 일으키는 주체<ul><li><button type="button" class="not-hidden">비동기적 행위</button> : 다수의 프로세스가 서로 규칙적이거나 연속적이지 않고 독립적으로 실행되는 것</li></ul></li><li>지정된 결과를 얻기 위한 일련의 계통적 동작</li><li>목적 또는 결과에 따라 발생되는 사건들의 과정</li><li>운영체제가 관리하는 실행 단위</li></ul></li></ul></li><li><button type="button" class="red">PCB(Process Control Block, 프로세스 제어 블록)</button><ul><li><b>운영체제가 프로세스에 대한 중요한 정보를 저장해 놓은 곳</b></li><li>각 프로세스가 생성될 때마다 고유의 PCB가 생성되고, 프로세스가 완료되면 PCB는 제거됨</li><li><b>PCB에 저장되어 있는 정보</b><ul><li>프로세스의 현재 상태</li><li>포인터</li><li>프로세스 고유 식별자</li><li>스케줄링 및 프로세스의 우선순위</li><li>CPU 레지스터 정보</li><li>주기억장치 관리 정보</li><li>입·출력 상태 정보</li><li>계정 정보</li></ul></li></ul></li><li><button type="button" class="red">프로세스 상태 전이</button><ul><li>프로세스가 시스템 내에 존재하는 동안 프로세스의 상태가 변하는 것</li><li><span class="exam block">책2 374페이지 <b>상태 전이도</b> 참고</span><ul><li><button type="button">제출(Submit)</button> : 작업을 처리하기 위해 사용자가 작업을 시스템에 제출한 상태</li><li><button type="button">접수(Hold)</button> : 제출된 작업이 <button type="button" class="not-hidden">스풀 공간인 디스크</button>의 할당 위치에 저장된 상태</li><li><button type="button">준비(Ready)</button> : 프로세스가 프로세서를 할당받기 위해 기다리고 있는 상태</li><li><button type="button">실행(Run)</button> : 준비상태 큐에 있는 프로세스가 프로세서를 할당받아 실행되는 상태</li><li><button type="button">대기(Wait), 블록(Block)</button> : 프로세스에 입·출력 처리가 필요하면 현재 실행 중인 프로세스가 중단되고, 입·출력 처리가 완료될 때까지 대기하고 있는 상태</li><li><button type="button">종료(Terminated, Exit)</button> : 프로세스의 실행이 끝나고 프로세스 할당이 해제된 상태</li></ul></li><li><b>관련 용어</b><ul><li><button type="button">Dispatch</button><ul><li><button type="button" class="not-hidden">준비</button> 상태에서 대기하고 있는 프로세스 중 하나가 프로세서를 할당받아 <button type="button" class="not-hidden">실행</button> 상태로 전이되는 과정</li></ul></li><li><button type="button">Wake Up</button> : 입·출력 작업이 완료되어 프로세스가 <button type="button" class="not-hidden">대기</button> 상태에서 <button type="button" class="not-hidden">준비</button> 상태로 전이되는 과정</li><li><button type="button">Spooling</button> : 입·출력장치의 공유 및 상대적으로 느린 입·출력장치의 처리 속도를 보완하고 다중 프로그래밍 시스템의 성능을 향상시키기 위해 입·출력할 데이터를 직접 입·출력장치에 보내지 않고 나중에 한꺼번에 입·출력하기 위해 <button type="button" class="not-hidden">디스크</button>에 저장하는 과정</li><li><button type="button">교통량 제어기(Traffic Controller)</button> : 프로세스의 상태에 대한 조사와 통보 담당</li></ul></li></ul></li><li><button type="button" class="red">스레드(Thread)</button><ul><li><b>시스템의 여러 자원을 할당받아 실행하는 프로그램의 단위</b> 또는 프로세스 내에서의 작업 단위</li><li><button type="button">단일 스레드</button> : 하나의 프로세스에 하나의 스레드가 존재하는 경우</li><li><button type="button">다중 스레드</button> : 하나 이상의 스레드가 존재하는 경우</li><li>프로세스의 일부 특성을 갖고 있기 때문에 경량(lgith Weight) 프로세스라고도 함</li><li>스레드 기반 시스템에서 스레드는 독립적인 스케줄링의 최소 단위로서 프로세스의 역할을 담당함</li></ul></li></ul>
</article>
`;

export default post;