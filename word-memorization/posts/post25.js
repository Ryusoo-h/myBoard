
const post = `
<h1 class="title">정처기 실기 7.애플리케이션 테스트 관리2</h1>
<p class="post-date">
    <span class="creation-date">작성일 : 2023-07-15</span>
    <span class="modification-date">수정일 : 2023-07-21</span>
</p>
<p class="top-fixed-guide">
    <span class="red font-size-s">* 최종 암기 확인/복습을 위한 요약본</span>
    <br><mark>B096 테스트 케이스/테스트 시나리오/테스트 오라클</mark>
    <br><mark>C097 테스트 자동화 도구</mark>
    <br><mark>C098 결함 관리</mark>
    <br><mark>B099 애플리케이션 성능 분석</mark>
    <br><mark>C100 복잡도</mark>
    <br><mark>B101 애플리케이션 성능 개선</mark>
</p>
<hr>

<article id="sub1">
    <h2 class="sub-title"><b class="red">096</b></h2>
    <ul><li><button type="button" class="red">테스트 케이스(Test Case)</button><ul><li>구현된 소프트웨어가 <b>사용자의 요구사항을 정확하게 준수했는지를 확인하기 위해 설계된</b> 입력 값, 실행 조건, 기대 결과 등으로 구성된 <b>테스트 항목에 대한 명세서</b></li><li>미리 설계하면 테스트 오류 방지, 테스트 수행에 필요한 인력, 시간 등의 자원 낭비를 줄일 수 있음</li></ul></li><li><button type="button" class="red">테스트 시나리오(Test Scenario)</button><ul><li><b>테스트 케이스를 적용하는 순서에 따라 여러 개의 테스트 케이스를 묶은 집합</b></li><li>테스트 케이스를 적용하는 구체적인 절차 명시</li><li>테스트 순서에 대한 구체적인 절차, 사전 조건, 입력 데이터 등이 설정되어 있음</li></ul></li><li><button type="button" class="red">테스트 오라클(Test Oracle)</button><ul><li><b>테스트 결과가 올바른지 판단하기 위해 사전에 정의된 참 값을 대입하여 비교하는 기법 및 활동</b></li><li>결과를 판단하기 위해 테스트 케이스에 대한 예상 결과를 계산하거나 확인함</li><li><b>특징</b><ul><li><button type="button">제한된 검증</button> : 테스트 오라클을 모든 테스트 케이스에 적용할 수 없음</li><li><button type="button">수학적 기법</button> : 테스트 오라클의 값을 수학적 기법을 이용하여 구할 수 있음</li><li><button type="button">자동화 기능</button> : 테스트 대상 프로그램의 실행, 결과 비교, 커버리지 측정 등을 자동화 할 수 있음</li></ul></li><li><b>종류</b><ul><li><button type="button">참(True) 오라클</button> : 모든 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공하는 오라클. 발생된 모든 오류를 검출할 수 있음</li><li><button type="button">샘플링(Sampling) 오라클</button> : 특정한 몇몇 테스트 케이스의 입력 값들에 대해서만 기대하는 결과를 제공하는 오라클로 전수 테스트가 불가능한 경우 사용</li><li><button type="button">추정(Heuristic) 오라클</button> : 특정 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공하고, 나머지 입력 값들에 대해서는 추정으로 처리하는 오라클</li><li><button type="button">일관성 검사(Consistent) 오라클</button> : 애플리케이션에 변경이 있을 때, 테스트 케이스의 수행 전과 후의 결과 값이 동일한지를 확인하는 오라클</li></ul></li></ul></li></ul>
</article>
<hr>
<article id="sub2">
    <h2 class="sub-title">097</h2>
    <ul><li><b>테스트 자동화</b><ul><li>사람이 반복적으로 수행하던 테스트 절차를 스크립트 형태로 구현하는 자동화 도구를 적용함으로써 쉽고 효율적으로 테스트를 수행할 수 있도록 한것</li><li><b>테스트 유형에 따른 테스트 자동화 도구의 종류</b><ul><li><button type="button" class="red">정적 분석 도구</button>(<button type="button">Static Analysis Tools</button>)<ul><li><b>프로그램을 실행하지 않고 분석하는 도구</b></li><li>소스 코드에 대한 코딩 표준, 코딩 스타일, 코드 복잡도 및 남은 결함 등을 발견하기 위해 사용됨</li></ul></li><li><button type="button" class="red">테스트 실행 도구</button>(<button type="button">Test Execution Tools</button>)<ul><li><b>스크립트 언어를 사용하여 테스트를 실행하는 도구</b></li><li>테스트 데이터와 테스트 수행 방법 등이 포함된 스크립트를 작성한 후 실행함</li><li>데이터 주도 접근 방식 : 스프레드시트에 테스트 데이터를 저장하고, 이를 읽어 실행하는 방식</li><li>키워드 주도 접근 방식 : 스프레드시트에 테스트를 수행할 동작을 나타내는 키워드와 테스트 데이터를 저장하여 실행하는 방식</li></ul></li><li><button type="button" class="red">성능 테스트 도구</button>(<button type="button">Performance Test Tools</button>)<ul><li>애플리케이션의 처리량, 응답 시간, 경과 시간, 자원 사용율 등을 인위적으로 적용한 <b>가상의 사용자를 만들어 테스트를 수행함으로써 성능의 목표 달성 여부를 확인하는 도구</b></li></ul></li><li><button type="button" class="red">테스트 통제 도구</button>(<button type="button">Test Control Tools</button>)<ul><li><b>테스트 계획 및 관리, 테스트 수행, 결함 관리 등을 수행하는 도구</b></li><li>종류 : 형상 관리 도구, 결함 추적/관리 도구 등</li></ul></li></ul></li></ul></li><li><button type="button" class="red">테스트 하네스 도구</button>(<button type="button">Test Harness Tools</button>)<ul><li><b>테스트가 실행될 환경을 시뮬레이션 하여 컴포넌트 및 모듈이 정상적으로 테스트되도록 하는 도구</b></li><li><button type="button">테스트 하네스(Test Harness)</button> : 애플리케이션의 컴포넌트 및 모듈을 테스트하는 환경의 일부분으로, 테스트를 지원하기 위해 생성된 코드와 데이터를 의미함<ul><li><b>구성 요소</b><ul><li><button type="button" class="red">테스트 드라이버</button>(<button type="button">Test Driver</button>) : 테스트 대상의 하위 모듈을 호출하고, 파라미터를 전달하고, 모듈 테스트 수행 후의 결과를 도출하는 도구</li><li><button type="button" class="red">테스트 스텁</button>(<button type="button">Test Stub</button>) : 제어 모듈이 호출하는 타 모듈의 기능을 단순히 수행하는 도구로, 일시적으로 필요한 조건만을 가지고 있는 테스트용 모듈</li><li><button type="button" class="red">테스트 슈트</button>(<button type="button">Test Suites</button>) : 테스트 대상 컴포넌트나 모듈, 시스템에 사용되는 테스트 케이스의 집합</li><li><button type="button" class="red">테스트 케이스</button>(<button type="button">Test Case</button>) : 사용자의 요구사항을 정확하게 준수했는지 확인하기 위한 입력값, 실행 조건, 기대 결과 등으로 만들어진 테스트 항목의 명세서</li><li><button type="button" class="red">테스트 스크립트</button>(<button type="button">Test Script</button>) : 자동화된 테스트 실행 절차에 대한 명세서</li><li><button type="button" class="red">목 오브젝트</button>(<button type="button">Mock Object</button>) : 사전에 사용자의 행위를 조건부로 입력해 두면, 그 상황에 맞는 예정된 행위를 수행하는 객체</li></ul></li></ul></li></ul></li><li><b>테스트 수행 단계별 테스트 자동화 도구</b><ul><li><b>테스트 계획 단계</b><ul><li><button type="button">요구사항 관리</button> : 사용자의 요구사항 정의 및 변경 사항 등을 관리하는 도구</li></ul></li><li><b>테스트 분석/설계 단계</b><ul><li><button type="button">테스트 케이스 생성</button> : 테스트 기법에 따른 테스트 데이터 및 테스트 케이스 작성을 지원하는 도구</li></ul></li><li><b>테스트 수행 단계</b><ul><li><button type="button">테스트 자동화</button> : 테스트의 자동화를 도와주는 도구로 테스트의 효율성을 높임</li><li><button type="button">정적 분석</button> : 코딩 표준, 런타임 오류 등을 검증하는 도구</li><li><button type="button">동적 분석</button> : 대상 시스템의 시뮬레이션을 통해 오류를 검출하는 도구</li><li><button type="button">성능 테스트</button> : 가상의 사용자를 생성하여 시스템의 처리 능력을 측정하는 도구</li><li><button type="button">모니터링</button> : CPU, Memory 등과 같은 시스템 자원의 상태 확인 및 분석을 지원하는 도구</li></ul></li><li><b>테스트 관리 단계</b><ul><li><button type="button">커버리지 분석</button> : 테스트 완료 후 테스트의 충분성 여부 검증을 지원하는 도구</li><li><button type="button">형상 관리</button> : 테스트 수행에 필요한 다양한 도구 및 데이터를 관리하는 도구</li><li><button type="button">결함 추적/관리</button> : 테스트 시 발생한 결함 추적 및 관리 활동을 지원하는 도구</li></ul></li></ul></li></ul>
</article>
<hr>
<article id="sub3">
    <h2 class="sub-title">098</h2>
    <ul><li><button type="button" class="red">결함(Fault)</button><ul><li><b>오류 발생, 작동 실패 등과 같이 소프트웨어가 개발자가 설계한 것과 다르게 동작하거나 다른 결과가 발생되는 것</b></li><li>사용자가 예상한 결과와 실행 결과 간의 차이나 업무 내용과의 불일치 등으로 인해 변경이 필요한 부분도 모두 결함에 해당됨</li><li><b>결함 관리 프로세스</b><ol><li><button type="button">결함 관리 계획</button> : 전체 프로세스에 대한 결함 관리 일정, 인력, 업무 프로세스 등을 확보하여 계획을 수립함</li><li><button type="button">결함 기록</button> : 테스터는 발견된 결함을 <button type="button" class="not-hidden">결함 관리 DB</button>에 등록함</li><li><button type="button">결함 검토</button> : 테스터, 프로그램 리더, 품질 관리(QA) 담당자 등은 등록된 결함을 검토하고 결함을 수정할 개발자에게 전달함</li><li><button type="button">결함 수정</button> : 개발자는 전달받은 결함을 수정함</li><li><button type="button">결함 재확인</button> : 테스터는 개발자가 수정한 내용을 확인하고 다시 테스트를 수행함</li><li><button type="button">결함 상태 추적 및 모니터링 활동</button> : <button type="button" class="not-hidden">결함 관리 DB</button>를 이용하여 프로젝트 별 결함 유형, 발생률 등을 한눈에 볼 수 있는 대시보드 또는 게시판 형태의 서비스 제공</li><li><button type="button">최종 결함 분석 및 보고서 작성</button> : 발견된 결함에 대한 정보와 이해관계자들의 의견이 반영된 보고서를 작성하고 결함 관리를 종료함</li></ol></li><li><b>결함 상태 추적</b><ul><li>테스트에서 발견된 결함은 지속적으로 상태 변화를 추적하고 관리해야 함</li><li>발견된 결함에 대해 결함 관리 측정 지표의 속성 값들을 분석하여 향후 결함이 발견될 모듈 또는 컴포넌트를 추정할 수 있음</li><li><b>결함 관리 측정 지표</b><ul><li><button type="button">결함 분포</button> : 모듈 또는 컴포넌트의 특정 속성에 해당하는 결함 수 측정</li><li><button type="button">결함 추세</button> : 테스트 진행 시간에 따른 결함 수의 추이 분석</li><li><button type="button">결함 에이징</button> : 특정 결함 상태로 지속되는 시간 측정</li></ul></li><li><b>결함 추적 순서</b><ol><li><button type="button" class="red">결함 등록</button>(<button type="button">Open</button>) : 테스터와 품질 관리(QA) 담당자에 의해 발견된 결함이 등록된 상태</li><li><button type="button" class="red">결함 검토</button>(<button type="button">Reviewed</button>) : 등록된 결함이 테스터, 품질 관리(QA) 담당자, 프로그램 리더, 담당 모듈 개발자에 의해 검토된 상태</li><li><button type="button" class="red">결함 할당</button>(<button type="button">Assigned</button>) : 결함을 수정하기 위해 개발자와 문제 해결 담당자에게 결함이 할당된 상태</li><li><button type="button" class="red">결함 수정</button>(<button type="button">Resolved</button>) : 개발자가 결함 수정을 완료한 상태</li><li><button type="button" class="red">결함 조치 보류</button>(<button type="button">Deferred</button>) : 결함의 수정이 불가능해 연기된 상태로, 우선순위, 일정 등에 따라 재오픈을 준비중인 상태</li><li><button type="button" class="red">결함 종료</button>(<button type="button">Closed</button>) : 결함이 해결되어 테스터와 품질 관리(QA) 담당자가 종료를 승인한 상태</li><li><button type="button" class="red">결함 해제</button>(<button type="button">Clarified</button>) : 테스터, 프로그램 리더, 품질 관리(QA) 담당자가 종료 승인한 결함을 검토하여 결함이 아니라고 판명한 상태</li></ol></li></ul></li><li><b>결함 분류</b><ul><li><button type="button">시스템 결함</button> : 애플리케이션 환경이나 데이터베이스 처리에서 발생된 결함</li><li><button type="button">기능 결함</button> : 애플리케이션의 기획, 설계, 업무 시나리오 등의 단계에서 유입된 결함</li><li><button type="button">GUI 결함</button> : 사용자 화면 설계에서 발생된 결함</li><li><button type="button">문서 결함</button> : 기획자, 사용자, 개발자 간의 의사소통 및 기록이 원활하지 않아서 발생한 결함</li></ul></li><li><b>결함 심각도</b><ul><li>애플리케이션에 발생한 결함이 전체 시스템에 미치는 치명도를 나타내는 척도</li><li><b>High, Medium, Low</b> 또는 <b>치명적(Critical), 주요(major), 보통(Normal), 경미(Minor), 단순(Simple)</b> 등으로 분류됨</li></ul></li><li><b>결함 우선순위</b><ul><li>발견된 결함 처리에 신속성을 나타내는 척도</li><li>결함의 중요도와 심각도에 따라 설정되고 수정 여부가 결정됨</li><li><b>결정적(Critical), 높음(High), 보통(Medium), 낮음(Low)</b> 또는 <b>즉시 해결, 주의 요망, 대기 개선 권고</b> 등으로 분류됨</li></ul></li><li><b>결함 관리 도구</b><ul><li><button type="button">Mntis</button> : 결함 및 이슈 관리 도구로, 소프트웨어 설계 시 단위별 작업 내용을 기록할 수 있어 결함 추적도 가능한 도구</li><li><button type="button">Trac</button> : 결함 추적은 물론 결함을 통하여 관리할 수 있는 도구</li><li><button type="button">Redmine</button> : 프로젝트 관리 및 결함 추적이 가능한 도구</li><li><button type="button">Bugzilla</button> : 결함 신고, 확인, 처리 등 결함을 지속적으로 관리할 수 있는 도구. 결함의 심각도와 우선순위를 지정할 수도 있음</li></ul></li></ul></li></ul>
</article>
<hr>
<article id="sub4">
    <h2 class="sub-title"><b class="red">099</b></h2>
    <ul><li><button type="button" class="red">애플리케이션 성능</button><ul><li>최소한의 자원을 사용하여 최대한 많은 기능을 신속하게 처리하는 정도</li><li><b>측정 지표</b><ul><li><button type="button" class="red">처리량</button>(<button type="button">Throughput</button>) : 일정 시간 내에 애플리케이션이 처리하는 일의 양</li><li><button type="button" class="red">응답 시간</button>(<button type="button">Response Time</button>) : 애플리케이션에 요청을 전달한 시간부터 응답이 도착할 때까지 걸린 시간</li><li><button type="button" class="red">경과 시간</button>(<button type="button">Turn Around Time</button>) : 애플리케이션에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간</li><li><button type="button" class="red">자원 사용률</button>(<button type="button">Resource Usage</button>) : 애플리케이션이 의뢰한 작업을 처리하는 동안의 CPU 사용량, 메모리 사용량, 네트워크 사용량 등 자원 사용률</li></ul></li><li><b>도구 분류</b><ul><li><button type="button" class="red">성능 테스트 도구</button><ul><li>애플리케이션의 성능을 테스트하기 위해 <b>애플리케이션에 부하나 스트레스를 가하면서 애플리케이션의 성능 측정 지표를 점검하는 도구</b></li><li><b>종류</b><ul><li><button type="button">JMeter</button><ul><li>HTTP, FTP 등 다양한 프로토콜을 지원하는 부하 테스트 도구</li><li>지원 환경 : Cross-Platform</li></ul></li><li><button type="button">LoadUI</button><ul><li>서버 모니터링, Drag&Drop 등 사용자의 편리성이 강화된 부하 테스트 도구. HTTp, JDBC 등 다양한 프로토콜 지원</li><li>지원 환경 : Cross-Platform</li></ul></li><li><button type="button">OpenSTA</button><ul><li>HTTP, HTTPS 프로토콜에 대한 부하 테스트 및 생산품 모니터링 도구</li><li>지원 환경 : Windows</li></ul></li></ul></li></ul></li><li><button type="button" class="red">시스템 모니터링 도구</button><ul><li>애플리케이션이 실행되었을 때 시스템 자원의 사용량을 확인하고 분석하는 도구</li><li><b>종류</b><ul><li><button type="button">Scouter</button><ul><li>단일 뷰 통합/실시간 모니터링, 튜닝에 최적화된 인프라 통합 모니터링 도구</li><li>애플리케이션의 성능을 모니터링/통제하는 도구</li><li>지원환경 : Cross-Platform</li></ul></li><li><button type="button">Zabbix</button><ul><li>웹기반 서버, 서비스, 애플리케이션 등의 모니터링 도구 </li><li>지원환경 : Cross-Platform</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>
</article>
<hr>
<article id="sub5">
    <h2 class="sub-title">100</h2>
    <ul><li><button type="button">복잡도(Complexity)</button><ul><li>시스템이나 시스템 구성 요소 또는 소프트웨어의 복잡한 정도를 나타내는 말</li><li>시스템 또는 소프트웨어를 어느 정도의 수준까지 테스트해야 하는지 또는 개발하는 데 어느 정도의 자원이 소요되는지 예측하는 데 사용됨</li></ul></li><li><button type="button" class="red">시간 복잡도</button><ul><li><b>알고리즘을 수행하기 위해 프로세스가 수행하는 연산 횟수를 수치화한 것</b></li><li>시간 복잡도가 낮을수록 알고리즘의 실행시간이 짧고, 높을수록 실행시간이 김</li><li><b>점근 표기법의 종류</b><ul><li><button type="button" class="red">빅오 표기법</button>(<button type="button">Big-O Notation</button>)<ul><li>알고리즘의 실행시간이 최악일 때를 표기하는 방법</li><li>입력값에 대해 알고리즘을 수행했을 때 명령어의 실행 횟수는 어떠한 경우에도 표기 수치보다 많을 수 없음</li><li><b>빅오 표기법으로 표현한 최악의 알고리즘 시간 복잡도</b><ul><li><b>O(1)</b> : 입력값(n)에 관계 없이 일정하게 문제 해결에 하나의 단계만을 거침 <span class="exam">ex) <button type="button">스택의 삽입(Push)</button>, <button type="button">삭제(Pop)</button></span></li><li><b>O(log2n)</b> : 문제 해결에 필요한 단계가 입력값(n) 또는 조건에 의해 감소함 <span class="exam">ex) <button type="button">이진 트리(Binary Tree)</button>, <button type="button">이진 검색(Binary Search)</button></span></li><li><b>O(n)</b> : 문제 해결에 필요한 단계가 입력값(n)과 1:1의 관계를 가짐 <span class="exam">ex) <button type="button">for문</button></span></li><li><b>O(nlog2n)</b> : 문제 해결에 필요한 단계가 n(log2n)번만큼 수행됨 <span class="exam">ex) <button type="button">힙 정렬(Heap Sort)</button>, <button type="button">2-Way 합병 정렬(Merge Sort)</button></span></li><li><b>O(n^2)</b> : 문제 해결에 필요한 단계가 입력값(n)의 제곱만큼 수행됨 <span class="exam">ex) <button type="button">삽입 정렬(Insertion Sort)</button>, <button type="button">쉘 정렬(Shell Sort)</button>, <button type="button">선택 정렬(Selection Sort)</button>, <button type="button">버블 정렬(Bubble Sort)</button>, <button type="button">퀵 정렬(Quick Sort)</button></span></li><li><b>O(2^n)</b> : 문제 해결에 필요한 단계가 2의 입력값(n) 제곱만큼 수행됨 <span class="exam">ex) <button type="button">피보나치 수열(Fibonacci Sequence)</button></span></li></ul></li></ul></li><li><button type="button" class="red">세타 표기법</button>(<button type="button">Big-Θ Notation</button>)<ul><li>알고리즘의 실행시간이 평균일 때를 표기하는 방법</li><li>입력값에 대해 알고리즘을 수행했을 때 명령어 실행 횟수의 평균적인 수치를 표기함</li></ul></li><li><button type="button" class="red">오메가 표기법</button>(<button type="button">Big-Ω Notation</button>)<ul><li>알고리즘의 실행시간이 최상일 때를 표기하는 방법</li><li>입력값에 대해 알고리즘을 수행했을 때 명령어의 실행 횟수는 어떠한 경우에도 표기 수치보다 적을 수 없음</li></ul></li></ul></li></ul></li><li><button type="button" class="red">순환 복잡도</button>(<button type="button">Cyclomatic Complexity</button>)<ul><li>= <button type="button" class="red">맥케이브 순환도</button>(<button type="button">McCabe's Cyclomatic</button>) = <button type="button" class="red">맥케이브 복잡도 메트릭</button>(<button type="button">McCabe's Complexity Metrics</button>)</li><li>한 프로그램의 논리적인 복잡도를 측정하기 위한 소프트웨어의 척도</li><li>제어 흐름도 이론에 기초를 둠</li><li><mark>제어 흐름도 G</mark>에서 <mark>순환 복잡도 V(G)</mark>는 다음과 같은 방법으로 계산할 수 있음<ul><li>방법1. 순환 복잡도 = 제어 흐름도의 영역의 수</li><li>방법2. <code>V(G) = E - N + 2</code> <mark>(E = 화살표 수, N = 노드 수)</mark></li></ul></li></ul></li></ul>
</article>
<hr>
<article id="sub6">
    <h2 class="sub-title"><b class="red">101 애플리케이션 성능 개선</b></h2>
    <ul><li><button type="button">소스 코드 최적화</button><ul><li>나쁜 코드(Bad Code)를 배제하고, 클린 코드(Clean Code)로 작성하는 것</li><li><button type="button" class="not-hidden">클린 코드(Clean Code)</button> : 누구나 쉽게 이해하고 수정 및 추가할 수 있는 단순, 명료한 코드, 즉 잘 작성된 코드</li><li><button type="button" class="not-hidden">나쁜 코드(Bad Code)</button><ul><li>프로그램의 로직(Logic)이 복잡하고 이해하기 어려운 코드</li><li><b>대표적인 나쁜 코드</b><ul><li><button type="button">스파게티 코드</button> : 코드의 로직이 서로 복잡하게 얽혀 있는 코드</li><li><button type="button">외계인 코드</button> : 아주 오래되거나 참고문서 또는 개발자가 없어 유지보수 작업이 어려운 코드</li></ul></li></ul></li><li>나쁜 코드로 작성된 애플리케이션의 코드를 클린 코드로 수정하면 애플리케이션의 성능이 개선된다</li></ul></li><li><b>클린코드 작성 원칙</b><ul><li><button type="button">가독성</button><ul><li>누구든지 코드를 쉽게 읽을 수 있도록 작성함</li><li>코드 작성 시 이해하기 쉬운 용어를 사용하거나 들여쓰기 기능 등을 사용함</li></ul></li><li><button type="button">단순성</button><ul><li>코드를 간단하게 작성함</li><li>한 번에 한 가지를 처리하도록 코드를 작성하고 클래스/메소드/함수 등을 최소 단위로 분리함</li></ul></li><li><button type="button">의존성 배제</button><ul><li>코드가 다른 모듈에 미치는 영향을 최소화함</li><li>코드 변경 시 다른 부분에 영향이 없도록 작성함</li></ul></li><li><button type="button">중복성 최소화</button><ul><li>코드의 중복을 최소화함</li><li>중복된 코드는 삭제하고 공통된 코드를 사용함</li></ul></li><li><button type="button">추상화</button><ul><li>상위 클래스/메소드/함수에서는 간략하게 애플리케이션의 특성을 나타내고, 상세내용은 하위 클래스/메소드/함수에서 구현함</li></ul></li></ul></li><li><b>소스코드 최적화 유형</b><ul><li><button type="button">클래스 분할 배치</button> : 하나의 클래스는 하나의 역할만 수행하도록 응집도를 높이고, 크기를 작게 작성함</li><li><button type="button">느슨한 결합(Loosely Coupled)</button> : 인터페이스 클래스를 이용하여 추상화된 자료 구조와 메소드를 구현함으로써 클래스 간의 의존성을 최소화함</li></ul></li><li><b>소스 코드 품질 분석 도구</b><ul><li>소스 코드의 코딩 스타일, 코드에 설정된 코딩 표준, 코드의 복잡도, 코드에 존재하는 메모리 누수 현상, 스레드 결함 등을 발견하기 위해 사용하는 분석 도구</li><li><b>구분</b><ul><li><button type="button" class="red">정적 분석 도구</button>(<button type="button">Static Analysis</button>)<ul><li>작성한 소스 코드를 실행하지 않고 코딩 표준이나 코딩 스타일, 결함 등을 확인하는 코드 분석 도구</li><li>종류 : pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura 등</li></ul></li><li><button type="button" class="red">동적 분석 도구</button>(<button type="button">Dynamic Analysis</button>)<ul><li>작성한 소스 코드를 실행하여 코드에 존재하는 메모리 누수, 스레드 결함 등을 분석하는 도구</li><li>종류 : Avalanche, Valgrind 등</li></ul></li></ul></li><li><b>종류</b><ul><li><button type="button">pmd</button> : 소스 코드에 대한 미사용 변수, 최적화되지 않은 코드 등 결함을 유발할 수 있는 코드를 검사함<br>지원 환경 : Linux, Windows</li><li><button type="button">cppcheck</button> : C/C++ 코드에 대한 메모리 누수, 오버플로우 등 분석<br>지원 환경 : Windows</li><li><button type="button">SonarQube</button> : 중복 코드, 복잡도, 코딩 설계 등을 분석하는 소스 분석 통합 플랫폼<br>지원 환경 : Cross-Platform</li><li><button type="button">checkstyle</button> : 자바 코드에 대해 소스 코드 표준을 따르고 있는지 검사함. 다양한 개발 도구에 통합하여 사용 가능함<br>지원 환경 : Cross-Platform</li><li><button type="button">ccm</button> : 다양한 언어의 코드 복잡도를 분석함<br>지원 환경 : Cross-Platform</li><li><button type="button">cobertura</button> : 자바 언어의 소스 코드 복잡도 분석 및 테스트 커버리지를 측정함<br>지원 환경 : Cross-Platform</li><li><button type="button">Avalanche</button> : Valgrind 프레임워크 및 STP 기반으로 구현됨. 프로그램에 대한 결함 및 취약점 등을 분석함<br>지원 환경 : Linux, Android</li><li><button type="button">Valgrind</button> : 프로그램 내에 존재하는 메모리 및 쓰레드 결함 등을 분석함<br>지원 환경 : Cross-Platform<br/></li></ul></li></ul></li></ul>
</article>
`;

export default post;